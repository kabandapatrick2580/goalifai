"""empty message

Revision ID: 89c128448dc9
Revises: a1f18d60aee3
Create Date: 2025-06-23 13:46:32.358914

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '89c128448dc9'
down_revision = 'a1f18d60aee3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Create the new goal_priority enum type
    op.execute("CREATE TYPE goal_priority AS ENUM ('High', 'Medium', 'Low')")

    # Step 2: Update categories_type table - Add unique constraint on type_id
    with op.batch_alter_table('categories_type', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_categories_type_type_id', ['type_id'])

    # Step 3: Update goals table - Alter priority column to use goal_priority enum
    # Normalize existing priority values to match the new enum
    op.execute("""
        UPDATE goals
        SET priority = CASE
            WHEN priority = 'High' THEN 'High'
            WHEN priority = 'Medium' THEN 'Medium'
            WHEN priority = 'Low' THEN 'Low'
            ELSE 'Medium'  -- Default for invalid/null values
        END
    """)
    
    with op.batch_alter_table('goals', schema=None) as batch_op:
        batch_op.alter_column(
            'priority',
            existing_type=postgresql.ENUM('High', 'Medium', 'Low', name='priority'),
            type_=sa.Enum('High', 'Medium', 'Low', name='goal_priority', create_type=False),
            postgresql_using='priority::goal_priority',
            existing_nullable=False,
            existing_server_default=sa.text("'Medium'::goal_priority")
        )

    # Step 4: Update transaction_categories table - Alter category_type to UUID
    # Ensure category_type values are valid UUIDs or map them to valid UUIDs
    # Example: If category_type is 'Income' or 'Expense', map to UUIDs from categories_type
    op.execute("""
        UPDATE transaction_categories
        SET category_type = CASE
            WHEN category_type = 'Income' THEN (
                SELECT type_id FROM categories_type WHERE name = 'Income' LIMIT 1
            )
            WHEN category_type = 'Expense' THEN (
                SELECT type_id FROM categories_type WHERE name = 'Expense' LIMIT 1
            )
            ELSE '00000000-0000-0000-0000-000000000000'  -- Default UUID
        END
    """)

    with op.batch_alter_table('transaction_categories', schema=None) as batch_op:
        batch_op.alter_column(
            'category_type',
            existing_type=postgresql.ENUM('Income', 'Expense', name='category_type'),
            type_=sa.UUID(),
            postgresql_using='category_type::uuid',
            existing_nullable=False
        )
        batch_op.create_unique_constraint('uq_transaction_categories_category_id', ['category_id'])
        batch_op.create_foreign_key(
            'fk_transaction_categories_category_type',
            'categories_type',
            ['category_type'],
            ['type_id']
        )

    # Step 5: Clean up old enum types (optional, if no other columns use them)
    op.execute("DROP TYPE IF EXISTS priority")
    op.execute("DROP TYPE IF EXISTS category_type")

def downgrade():
    # Step 1: Recreate old enum types for downgrade
    op.execute("CREATE TYPE priority AS ENUM ('High', 'Medium', 'Low')")
    op.execute("CREATE TYPE category_type AS ENUM ('Income', 'Expense')")

    # Step 2: Update transaction_categories table - Revert category_type to enum
    with op.batch_alter_table('transaction_categories', schema=None) as batch_op:
        # Map UUIDs back to enum values based on categories_type
        op.execute("""
            UPDATE transaction_categories
            SET category_type = (
                SELECT name FROM categories_type
                WHERE type_id = transaction_categories.category_type
                LIMIT 1
            )
        """)
        batch_op.alter_column(
            'category_type',
            existing_type=sa.UUID(),
            type_=postgresql.ENUM('Income', 'Expense', name='category_type', create_type=False),
            postgresql_using='category_type::text',
            existing_nullable=False
        )
        batch_op.drop_constraint('fk_transaction_categories_category_type', type_='foreignkey')
        batch_op.drop_constraint('uq_transaction_categories_category_id', type_='unique')

    # Step 3: Update goals table - Revert priority to old enum
    with op.batch_alter_table('goals', schema=None) as batch_op:
        batch_op.alter_column(
            'priority',
            existing_type=sa.Enum('High', 'Medium', 'Low', name='goal_priority', create_type=False),
            type_=postgresql.ENUM('High', 'Medium', 'Low', name='priority', create_type=False),
            postgresql_using='priority::priority',
            existing_nullable=False,
            existing_server_default=sa.text("'Medium'::priority")
        )

    # Step 4: Update categories_type table - Drop unique constraint
    with op.batch_alter_table('categories_type', schema=None) as batch_op:
        batch_op.drop_constraint('uq_categories_type_type_id', type_='unique')

    # Step 5: Drop new enum type
    op.execute("DROP TYPE IF EXISTS goal_priority")